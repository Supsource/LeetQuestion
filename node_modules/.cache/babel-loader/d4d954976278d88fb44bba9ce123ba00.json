{"ast":null,"code":"import React, { useState, useEffect, useRef, useMemo, useCallback, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getContainer from 'dom-lib/getContainer';\nimport ownerDocument from 'dom-lib/ownerDocument';\nimport removeClass from 'dom-lib/removeClass';\nimport on from 'dom-lib/on';\nimport addClass from 'dom-lib/addClass';\nimport addStyle from 'dom-lib/addStyle';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport isElement from '../DOMHelper/isElement';\nimport positionUtils from './positionUtils';\nimport { getDOMNode } from '../utils';\nimport { useUpdateEffect } from '../utils';\n\nvar usePosition = function usePosition(props, ref) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'right' : _props$placement,\n      _props$preventOverflo = props.preventOverflow,\n      preventOverflow = _props$preventOverflo === void 0 ? false : _props$preventOverflo,\n      _props$containerPaddi = props.containerPadding,\n      containerPadding = _props$containerPaddi === void 0 ? 0 : _props$containerPaddi,\n      container = props.container,\n      triggerTarget = props.triggerTarget;\n  var containerRef = useRef(null);\n  var lastTargetRef = useRef(null);\n  var overlayResizeObserver = useRef();\n  var defaultPosition = {\n    positionLeft: 0,\n    positionTop: 0,\n    arrowOffsetLeft: null,\n    arrowOffsetTop: null\n  };\n\n  var _useState = useState(defaultPosition),\n      position = _useState[0],\n      setPosition = _useState[1];\n\n  var utils = useMemo(function () {\n    return positionUtils({\n      placement: placement,\n      preventOverflow: preventOverflow,\n      padding: containerPadding\n    });\n  }, [placement, preventOverflow, containerPadding]);\n  var updatePosition = useCallback(\n  /**\n   * @param placementChanged  Whether the placement has changed\n   * @param forceUpdateDOM Whether to update the DOM directly\n   * @returns void\n   */\n  function (placementChanged, forceUpdateDOM) {\n    if (placementChanged === void 0) {\n      placementChanged = true;\n    }\n\n    if (!(triggerTarget !== null && triggerTarget !== void 0 && triggerTarget.current)) {\n      return;\n    }\n\n    var targetElement = getDOMNode(triggerTarget);\n\n    if (!isElement(targetElement)) {\n      throw new Error('`target` should return an HTMLElement');\n    } //  If the target and placement do not change, the position is not updated.\n\n\n    if (targetElement === lastTargetRef.current && !placementChanged) {\n      return;\n    }\n\n    var overlay = getDOMNode(ref.current); // fixme dom-lib getContainer incorrect type\n\n    var containerElement = getContainer(typeof container === 'function' ? container() : container !== null && container !== void 0 ? container : null, ownerDocument(ref.current).body);\n    var posi = utils.calcOverlayPosition(overlay, targetElement, containerElement);\n\n    if (forceUpdateDOM && overlay) {\n      var _overlay$className, _overlay$className$ma;\n\n      var preClassName = overlay === null || overlay === void 0 ? void 0 : (_overlay$className = overlay.className) === null || _overlay$className === void 0 ? void 0 : (_overlay$className$ma = _overlay$className.match(/(placement-\\S+)/)) === null || _overlay$className$ma === void 0 ? void 0 : _overlay$className$ma[0];\n      removeClass(overlay, preClassName);\n\n      if (posi.positionClassName) {\n        addClass(overlay, posi.positionClassName);\n      }\n\n      addStyle(overlay, {\n        left: posi.positionLeft + \"px\",\n        top: posi.positionTop + \"px\"\n      });\n    } else {\n      setPosition(posi);\n    }\n\n    containerRef.current = containerElement;\n    lastTargetRef.current = targetElement;\n  }, [container, ref, triggerTarget, utils]);\n  useEffect(function () {\n    updatePosition(false);\n    var overlay = getDOMNode(ref.current);\n    var containerScrollListener;\n\n    if (containerRef.current && preventOverflow) {\n      var _containerRef$current; // Update the overlay position when the container scroll bar is scrolling\n\n\n      containerScrollListener = on(((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.tagName) === 'BODY' ? window : containerRef.current, 'scroll', function () {\n        return updatePosition(true, true);\n      });\n    } // Update the position when the window size changes\n\n\n    var resizeListener = on(window, 'resize', function () {\n      return updatePosition(true, true);\n    });\n\n    if (overlay) {\n      // Update the position when the size of the overlay changes\n      overlayResizeObserver.current = new ResizeObserver(function () {\n        return updatePosition(true, true);\n      });\n      overlayResizeObserver.current.observe(overlay);\n    }\n\n    return function () {\n      var _containerScrollListe, _overlayResizeObserve;\n\n      lastTargetRef.current = null;\n      (_containerScrollListe = containerScrollListener) === null || _containerScrollListe === void 0 ? void 0 : _containerScrollListe.off();\n      resizeListener === null || resizeListener === void 0 ? void 0 : resizeListener.off();\n      (_overlayResizeObserve = overlayResizeObserver.current) === null || _overlayResizeObserve === void 0 ? void 0 : _overlayResizeObserve.disconnect();\n    };\n  }, [preventOverflow, ref, updatePosition]);\n  useUpdateEffect(function () {\n    return updatePosition();\n  }, [updatePosition, placement]);\n  return [position, updatePosition];\n};\n\nvar Position = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className;\n  var childRef = React.useRef(null);\n\n  var _usePosition = usePosition(props, childRef),\n      position = _usePosition[0],\n      updatePosition = _usePosition[1];\n\n  var positionClassName = position.positionClassName,\n      arrowOffsetLeft = position.arrowOffsetLeft,\n      arrowOffsetTop = position.arrowOffsetTop,\n      positionLeft = position.positionLeft,\n      positionTop = position.positionTop;\n  useImperativeHandle(ref, function () {\n    return {\n      get child() {\n        return childRef.current;\n      },\n\n      updatePosition: updatePosition\n    };\n  });\n\n  if (typeof children === 'function') {\n    var childProps = {\n      className: classNames(className, positionClassName),\n      arrowOffsetLeft: arrowOffsetLeft,\n      arrowOffsetTop: arrowOffsetTop,\n      left: positionLeft,\n      top: positionTop\n    };\n    return children(childProps, childRef);\n  }\n\n  return children;\n});\nPosition.displayName = 'Position';\nPosition.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.func.isRequired,\n  container: PropTypes.oneOfType([PropTypes.func, PropTypes.any]),\n  containerPadding: PropTypes.number,\n  placement: PropTypes.any,\n  preventOverflow: PropTypes.bool,\n  triggerTarget: PropTypes.any\n};\nexport default Position;","map":{"version":3,"sources":["/Users/supriyomal/Documents/GitHub/LeetQuestion/node_modules/rsuite/esm/Overlay/Position.js"],"names":["React","useState","useEffect","useRef","useMemo","useCallback","useImperativeHandle","PropTypes","classNames","getContainer","ownerDocument","removeClass","on","addClass","addStyle","ResizeObserver","isElement","positionUtils","getDOMNode","useUpdateEffect","usePosition","props","ref","_props$placement","placement","_props$preventOverflo","preventOverflow","_props$containerPaddi","containerPadding","container","triggerTarget","containerRef","lastTargetRef","overlayResizeObserver","defaultPosition","positionLeft","positionTop","arrowOffsetLeft","arrowOffsetTop","_useState","position","setPosition","utils","padding","updatePosition","placementChanged","forceUpdateDOM","current","targetElement","Error","overlay","containerElement","body","posi","calcOverlayPosition","_overlay$className","_overlay$className$ma","preClassName","className","match","positionClassName","left","top","containerScrollListener","_containerRef$current","tagName","window","resizeListener","observe","_containerScrollListe","_overlayResizeObserve","off","disconnect","Position","forwardRef","children","childRef","_usePosition","child","childProps","displayName","propTypes","string","func","isRequired","oneOfType","any","number","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getContainer from 'dom-lib/getContainer';\nimport ownerDocument from 'dom-lib/ownerDocument';\nimport removeClass from 'dom-lib/removeClass';\nimport on from 'dom-lib/on';\nimport addClass from 'dom-lib/addClass';\nimport addStyle from 'dom-lib/addStyle';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport isElement from '../DOMHelper/isElement';\nimport positionUtils from './positionUtils';\nimport { getDOMNode } from '../utils';\nimport { useUpdateEffect } from '../utils';\n\nvar usePosition = function usePosition(props, ref) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'right' : _props$placement,\n      _props$preventOverflo = props.preventOverflow,\n      preventOverflow = _props$preventOverflo === void 0 ? false : _props$preventOverflo,\n      _props$containerPaddi = props.containerPadding,\n      containerPadding = _props$containerPaddi === void 0 ? 0 : _props$containerPaddi,\n      container = props.container,\n      triggerTarget = props.triggerTarget;\n  var containerRef = useRef(null);\n  var lastTargetRef = useRef(null);\n  var overlayResizeObserver = useRef();\n  var defaultPosition = {\n    positionLeft: 0,\n    positionTop: 0,\n    arrowOffsetLeft: null,\n    arrowOffsetTop: null\n  };\n\n  var _useState = useState(defaultPosition),\n      position = _useState[0],\n      setPosition = _useState[1];\n\n  var utils = useMemo(function () {\n    return positionUtils({\n      placement: placement,\n      preventOverflow: preventOverflow,\n      padding: containerPadding\n    });\n  }, [placement, preventOverflow, containerPadding]);\n  var updatePosition = useCallback(\n  /**\n   * @param placementChanged  Whether the placement has changed\n   * @param forceUpdateDOM Whether to update the DOM directly\n   * @returns void\n   */\n  function (placementChanged, forceUpdateDOM) {\n    if (placementChanged === void 0) {\n      placementChanged = true;\n    }\n\n    if (!(triggerTarget !== null && triggerTarget !== void 0 && triggerTarget.current)) {\n      return;\n    }\n\n    var targetElement = getDOMNode(triggerTarget);\n\n    if (!isElement(targetElement)) {\n      throw new Error('`target` should return an HTMLElement');\n    } //  If the target and placement do not change, the position is not updated.\n\n\n    if (targetElement === lastTargetRef.current && !placementChanged) {\n      return;\n    }\n\n    var overlay = getDOMNode(ref.current); // fixme dom-lib getContainer incorrect type\n\n    var containerElement = getContainer(typeof container === 'function' ? container() : container !== null && container !== void 0 ? container : null, ownerDocument(ref.current).body);\n    var posi = utils.calcOverlayPosition(overlay, targetElement, containerElement);\n\n    if (forceUpdateDOM && overlay) {\n      var _overlay$className, _overlay$className$ma;\n\n      var preClassName = overlay === null || overlay === void 0 ? void 0 : (_overlay$className = overlay.className) === null || _overlay$className === void 0 ? void 0 : (_overlay$className$ma = _overlay$className.match(/(placement-\\S+)/)) === null || _overlay$className$ma === void 0 ? void 0 : _overlay$className$ma[0];\n      removeClass(overlay, preClassName);\n\n      if (posi.positionClassName) {\n        addClass(overlay, posi.positionClassName);\n      }\n\n      addStyle(overlay, {\n        left: posi.positionLeft + \"px\",\n        top: posi.positionTop + \"px\"\n      });\n    } else {\n      setPosition(posi);\n    }\n\n    containerRef.current = containerElement;\n    lastTargetRef.current = targetElement;\n  }, [container, ref, triggerTarget, utils]);\n  useEffect(function () {\n    updatePosition(false);\n    var overlay = getDOMNode(ref.current);\n    var containerScrollListener;\n\n    if (containerRef.current && preventOverflow) {\n      var _containerRef$current;\n\n      // Update the overlay position when the container scroll bar is scrolling\n      containerScrollListener = on(((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.tagName) === 'BODY' ? window : containerRef.current, 'scroll', function () {\n        return updatePosition(true, true);\n      });\n    } // Update the position when the window size changes\n\n\n    var resizeListener = on(window, 'resize', function () {\n      return updatePosition(true, true);\n    });\n\n    if (overlay) {\n      // Update the position when the size of the overlay changes\n      overlayResizeObserver.current = new ResizeObserver(function () {\n        return updatePosition(true, true);\n      });\n      overlayResizeObserver.current.observe(overlay);\n    }\n\n    return function () {\n      var _containerScrollListe, _overlayResizeObserve;\n\n      lastTargetRef.current = null;\n      (_containerScrollListe = containerScrollListener) === null || _containerScrollListe === void 0 ? void 0 : _containerScrollListe.off();\n      resizeListener === null || resizeListener === void 0 ? void 0 : resizeListener.off();\n      (_overlayResizeObserve = overlayResizeObserver.current) === null || _overlayResizeObserve === void 0 ? void 0 : _overlayResizeObserve.disconnect();\n    };\n  }, [preventOverflow, ref, updatePosition]);\n  useUpdateEffect(function () {\n    return updatePosition();\n  }, [updatePosition, placement]);\n  return [position, updatePosition];\n};\n\nvar Position = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className;\n  var childRef = React.useRef(null);\n\n  var _usePosition = usePosition(props, childRef),\n      position = _usePosition[0],\n      updatePosition = _usePosition[1];\n\n  var positionClassName = position.positionClassName,\n      arrowOffsetLeft = position.arrowOffsetLeft,\n      arrowOffsetTop = position.arrowOffsetTop,\n      positionLeft = position.positionLeft,\n      positionTop = position.positionTop;\n  useImperativeHandle(ref, function () {\n    return {\n      get child() {\n        return childRef.current;\n      },\n\n      updatePosition: updatePosition\n    };\n  });\n\n  if (typeof children === 'function') {\n    var childProps = {\n      className: classNames(className, positionClassName),\n      arrowOffsetLeft: arrowOffsetLeft,\n      arrowOffsetTop: arrowOffsetTop,\n      left: positionLeft,\n      top: positionTop\n    };\n    return children(childProps, childRef);\n  }\n\n  return children;\n});\nPosition.displayName = 'Position';\nPosition.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.func.isRequired,\n  container: PropTypes.oneOfType([PropTypes.func, PropTypes.any]),\n  containerPadding: PropTypes.number,\n  placement: PropTypes.any,\n  preventOverflow: PropTypes.bool,\n  triggerTarget: PropTypes.any\n};\nexport default Position;"]},"metadata":{},"sourceType":"module"}