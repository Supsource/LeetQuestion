{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { PARENT_KEY } from '../constants';\n/**\n * Flatten the data of a tree structure into a one-dimensional array.\n * @param treeData\n * @returns\n */\n\nfunction flattenData(treeData) {\n  var flattenItems = [];\n\n  function loop(treeData, parentNode) {\n    if (!Array.isArray(treeData)) {\n      return;\n    }\n\n    treeData.forEach(function (rowData) {\n      rowData[PARENT_KEY] = parentNode;\n      flattenItems.push(_extends({}, rowData));\n\n      if (rowData.children) {\n        loop(rowData.children, rowData);\n      }\n    });\n  }\n\n  loop(treeData, null);\n  return flattenItems;\n}\n\nexport default flattenData;","map":{"version":3,"sources":["/Users/supriyomal/Documents/GitHub/LeetQuestion/node_modules/rsuite-table/es/utils/flattenData.js"],"names":["_extends","PARENT_KEY","flattenData","treeData","flattenItems","loop","parentNode","Array","isArray","forEach","rowData","push","children"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,MAAIC,YAAY,GAAG,EAAnB;;AAEA,WAASC,IAAT,CAAcF,QAAd,EAAwBG,UAAxB,EAAoC;AAClC,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAL,EAA8B;AAC5B;AACD;;AAEDA,IAAAA,QAAQ,CAACM,OAAT,CAAiB,UAAUC,OAAV,EAAmB;AAClCA,MAAAA,OAAO,CAACT,UAAD,CAAP,GAAsBK,UAAtB;AACAF,MAAAA,YAAY,CAACO,IAAb,CAAkBX,QAAQ,CAAC,EAAD,EAAKU,OAAL,CAA1B;;AAEA,UAAIA,OAAO,CAACE,QAAZ,EAAsB;AACpBP,QAAAA,IAAI,CAACK,OAAO,CAACE,QAAT,EAAmBF,OAAnB,CAAJ;AACD;AACF,KAPD;AAQD;;AAEDL,EAAAA,IAAI,CAACF,QAAD,EAAW,IAAX,CAAJ;AACA,SAAOC,YAAP;AACD;;AAED,eAAeF,WAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { PARENT_KEY } from '../constants';\n\n/**\n * Flatten the data of a tree structure into a one-dimensional array.\n * @param treeData\n * @returns\n */\nfunction flattenData(treeData) {\n  var flattenItems = [];\n\n  function loop(treeData, parentNode) {\n    if (!Array.isArray(treeData)) {\n      return;\n    }\n\n    treeData.forEach(function (rowData) {\n      rowData[PARENT_KEY] = parentNode;\n      flattenItems.push(_extends({}, rowData));\n\n      if (rowData.children) {\n        loop(rowData.children, rowData);\n      }\n    });\n  }\n\n  loop(treeData, null);\n  return flattenItems;\n}\n\nexport default flattenData;"]},"metadata":{},"sourceType":"module"}