{"ast":null,"code":"import { useCallback, useRef } from 'react';\nexport default function useFocus(elementRef) {\n  // When grabbing focus, keep track of previous activeElement\n  // so that we can return focus later\n  var previousActiveElementRef = useRef(null); // Focus the element itself\n\n  var grab = useCallback(function () {\n    requestAnimationFrame(function () {\n      if (document.activeElement !== elementRef.current) {\n        var _elementRef$current;\n\n        previousActiveElementRef.current = document.activeElement;\n        (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.focus();\n      }\n    });\n  }, [elementRef]); // Return focus to previous active element\n\n  var release = useCallback(function (options) {\n    requestAnimationFrame(function () {\n      var _previousActiveElemen;\n\n      (_previousActiveElemen = previousActiveElementRef.current) === null || _previousActiveElemen === void 0 ? void 0 : _previousActiveElemen.focus(options);\n    });\n  }, []);\n  return {\n    grab: grab,\n    release: release\n  };\n}","map":{"version":3,"sources":["/Users/supriyomal/Documents/GitHub/LeetQuestion/node_modules/rsuite/esm/utils/useFocus.js"],"names":["useCallback","useRef","useFocus","elementRef","previousActiveElementRef","grab","requestAnimationFrame","document","activeElement","current","_elementRef$current","focus","release","options","_previousActiveElemen"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA,eAAe,SAASC,QAAT,CAAkBC,UAAlB,EAA8B;AAC3C;AACA;AACA,MAAIC,wBAAwB,GAAGH,MAAM,CAAC,IAAD,CAArC,CAH2C,CAGE;;AAE7C,MAAII,IAAI,GAAGL,WAAW,CAAC,YAAY;AACjCM,IAAAA,qBAAqB,CAAC,YAAY;AAChC,UAAIC,QAAQ,CAACC,aAAT,KAA2BL,UAAU,CAACM,OAA1C,EAAmD;AACjD,YAAIC,mBAAJ;;AAEAN,QAAAA,wBAAwB,CAACK,OAAzB,GAAmCF,QAAQ,CAACC,aAA5C;AACA,SAACE,mBAAmB,GAAGP,UAAU,CAACM,OAAlC,MAA+C,IAA/C,IAAuDC,mBAAmB,KAAK,KAAK,CAApF,GAAwF,KAAK,CAA7F,GAAiGA,mBAAmB,CAACC,KAApB,EAAjG;AACD;AACF,KAPoB,CAArB;AAQD,GATqB,EASnB,CAACR,UAAD,CATmB,CAAtB,CAL2C,CAczB;;AAElB,MAAIS,OAAO,GAAGZ,WAAW,CAAC,UAAUa,OAAV,EAAmB;AAC3CP,IAAAA,qBAAqB,CAAC,YAAY;AAChC,UAAIQ,qBAAJ;;AAEA,OAACA,qBAAqB,GAAGV,wBAAwB,CAACK,OAAlD,MAA+D,IAA/D,IAAuEK,qBAAqB,KAAK,KAAK,CAAtG,GAA0G,KAAK,CAA/G,GAAmHA,qBAAqB,CAACH,KAAtB,CAA4BE,OAA5B,CAAnH;AACD,KAJoB,CAArB;AAKD,GANwB,EAMtB,EANsB,CAAzB;AAOA,SAAO;AACLR,IAAAA,IAAI,EAAEA,IADD;AAELO,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID","sourcesContent":["import { useCallback, useRef } from 'react';\nexport default function useFocus(elementRef) {\n  // When grabbing focus, keep track of previous activeElement\n  // so that we can return focus later\n  var previousActiveElementRef = useRef(null); // Focus the element itself\n\n  var grab = useCallback(function () {\n    requestAnimationFrame(function () {\n      if (document.activeElement !== elementRef.current) {\n        var _elementRef$current;\n\n        previousActiveElementRef.current = document.activeElement;\n        (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.focus();\n      }\n    });\n  }, [elementRef]); // Return focus to previous active element\n\n  var release = useCallback(function (options) {\n    requestAnimationFrame(function () {\n      var _previousActiveElemen;\n\n      (_previousActiveElemen = previousActiveElementRef.current) === null || _previousActiveElemen === void 0 ? void 0 : _previousActiveElemen.focus(options);\n    });\n  }, []);\n  return {\n    grab: grab,\n    release: release\n  };\n}"]},"metadata":{},"sourceType":"module"}