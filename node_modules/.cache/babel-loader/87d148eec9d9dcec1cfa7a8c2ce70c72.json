{"ast":null,"code":"import { useRef, useState, useCallback } from 'react';\n/**\n * A hook for controlled value management.\n * In the case of passing the controlled value, the controlled value is returned, otherwise the value in state is returned.\n * Generally used for a component including controlled and uncontrolled modes.\n * @param controlledValue\n * @param defaultValue\n * @param formatValue\n */\n\nfunction useControlled(controlledValue, defaultValue) {\n  var controlledRef = useRef(false);\n  controlledRef.current = controlledValue !== undefined;\n\n  var _useState = useState(defaultValue),\n      uncontrolledValue = _useState[0],\n      setUncontrolledValue = _useState[1]; // If it is controlled, this directly returns the attribute value.\n\n\n  var value = controlledRef.current ? controlledValue : uncontrolledValue;\n  var setValue = useCallback(function (nextValue) {\n    // Only update the value in state when it is not under control.\n    if (!controlledRef.current) {\n      setUncontrolledValue(nextValue);\n    }\n  }, [controlledRef]);\n  return [value, setValue, controlledRef.current];\n}\n\nexport default useControlled;","map":{"version":3,"sources":["/Users/supriyomal/Desktop/hekors-website-main/node_modules/rsuite-table/es/utils/useControlled.js"],"names":["useRef","useState","useCallback","useControlled","controlledValue","defaultValue","controlledRef","current","undefined","_useState","uncontrolledValue","setUncontrolledValue","value","setValue","nextValue"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,eAAvB,EAAwCC,YAAxC,EAAsD;AACpD,MAAIC,aAAa,GAAGN,MAAM,CAAC,KAAD,CAA1B;AACAM,EAAAA,aAAa,CAACC,OAAd,GAAwBH,eAAe,KAAKI,SAA5C;;AAEA,MAAIC,SAAS,GAAGR,QAAQ,CAACI,YAAD,CAAxB;AAAA,MACIK,iBAAiB,GAAGD,SAAS,CAAC,CAAD,CADjC;AAAA,MAEIE,oBAAoB,GAAGF,SAAS,CAAC,CAAD,CAFpC,CAJoD,CAMX;;;AAGzC,MAAIG,KAAK,GAAGN,aAAa,CAACC,OAAd,GAAwBH,eAAxB,GAA0CM,iBAAtD;AACA,MAAIG,QAAQ,GAAGX,WAAW,CAAC,UAAUY,SAAV,EAAqB;AAC9C;AACA,QAAI,CAACR,aAAa,CAACC,OAAnB,EAA4B;AAC1BI,MAAAA,oBAAoB,CAACG,SAAD,CAApB;AACD;AACF,GALyB,EAKvB,CAACR,aAAD,CALuB,CAA1B;AAMA,SAAO,CAACM,KAAD,EAAQC,QAAR,EAAkBP,aAAa,CAACC,OAAhC,CAAP;AACD;;AAED,eAAeJ,aAAf","sourcesContent":["import { useRef, useState, useCallback } from 'react';\n/**\n * A hook for controlled value management.\n * In the case of passing the controlled value, the controlled value is returned, otherwise the value in state is returned.\n * Generally used for a component including controlled and uncontrolled modes.\n * @param controlledValue\n * @param defaultValue\n * @param formatValue\n */\n\nfunction useControlled(controlledValue, defaultValue) {\n  var controlledRef = useRef(false);\n  controlledRef.current = controlledValue !== undefined;\n\n  var _useState = useState(defaultValue),\n      uncontrolledValue = _useState[0],\n      setUncontrolledValue = _useState[1]; // If it is controlled, this directly returns the attribute value.\n\n\n  var value = controlledRef.current ? controlledValue : uncontrolledValue;\n  var setValue = useCallback(function (nextValue) {\n    // Only update the value in state when it is not under control.\n    if (!controlledRef.current) {\n      setUncontrolledValue(nextValue);\n    }\n  }, [controlledRef]);\n  return [value, setValue, controlledRef.current];\n}\n\nexport default useControlled;"]},"metadata":{},"sourceType":"module"}