{"ast":null,"code":"import canUseDOM from '../canUseDOM';\nimport { camelize } from './stringFormatter';\nvar memoized = {};\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nvar prefixRegex = new RegExp(\"^(\" + prefixes.join('|') + \")\");\nvar testStyle = canUseDOM ? document.createElement('div').style : {};\n\nfunction getWithPrefix(name) {\n  for (var i = 0; i < prefixes.length; i += 1) {\n    var prefixedName = prefixes[i] + name;\n\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {string} property Name of a css property to check for.\n * @return {?string} property name supported in the browser, or null if not\n * supported.\n */\n\n\nfunction getVendorPrefixedName(property) {\n  var name = camelize(property);\n\n  if (memoized[name] === undefined) {\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n\n    if (prefixRegex.test(capitalizedName)) {\n      throw new Error(\"getVendorPrefixedName must only be called with unprefixed\\n          CSS property names. It was called with \" + property);\n    }\n\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n\n  return memoized[name] || name;\n}\n\nexport default getVendorPrefixedName;","map":{"version":3,"sources":["/Users/supriyomal/Documents/GitHub/LeetQuestion/node_modules/dom-lib/esm/utils/getVendorPrefixedName.js"],"names":["canUseDOM","camelize","memoized","prefixes","prefixRegex","RegExp","join","testStyle","document","createElement","style","getWithPrefix","name","i","length","prefixedName","getVendorPrefixedName","property","undefined","capitalizedName","charAt","toUpperCase","slice","test","Error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,CAAC,QAAD,EAAW,IAAX,EAAiB,KAAjB,EAAwB,GAAxB,CAAf;AACA,IAAIC,WAAW,GAAG,IAAIC,MAAJ,CAAW,OAAOF,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAP,GAA4B,GAAvC,CAAlB;AACA,IAAIC,SAAS,GAAGP,SAAS,GAAGQ,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,KAAjC,GAAyC,EAAlE;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,CAACW,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;AAC3C,QAAIE,YAAY,GAAGZ,QAAQ,CAACU,CAAD,CAAR,GAAcD,IAAjC;;AAEA,QAAIG,YAAY,IAAIR,SAApB,EAA+B;AAC7B,aAAOQ,YAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAIL,IAAI,GAAGX,QAAQ,CAACgB,QAAD,CAAnB;;AAEA,MAAIf,QAAQ,CAACU,IAAD,CAAR,KAAmBM,SAAvB,EAAkC;AAChC,QAAIC,eAAe,GAAGP,IAAI,CAACQ,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BT,IAAI,CAACU,KAAL,CAAW,CAAX,CAArD;;AAEA,QAAIlB,WAAW,CAACmB,IAAZ,CAAiBJ,eAAjB,CAAJ,EAAuC;AACrC,YAAM,IAAIK,KAAJ,CAAU,iHAAiHP,QAA3H,CAAN;AACD;;AAEDf,IAAAA,QAAQ,CAACU,IAAD,CAAR,GAAiBA,IAAI,IAAIL,SAAR,GAAoBK,IAApB,GAA2BD,aAAa,CAACQ,eAAD,CAAzD;AACD;;AAED,SAAOjB,QAAQ,CAACU,IAAD,CAAR,IAAkBA,IAAzB;AACD;;AAED,eAAeI,qBAAf","sourcesContent":["import canUseDOM from '../canUseDOM';\nimport { camelize } from './stringFormatter';\nvar memoized = {};\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nvar prefixRegex = new RegExp(\"^(\" + prefixes.join('|') + \")\");\nvar testStyle = canUseDOM ? document.createElement('div').style : {};\n\nfunction getWithPrefix(name) {\n  for (var i = 0; i < prefixes.length; i += 1) {\n    var prefixedName = prefixes[i] + name;\n\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {string} property Name of a css property to check for.\n * @return {?string} property name supported in the browser, or null if not\n * supported.\n */\n\n\nfunction getVendorPrefixedName(property) {\n  var name = camelize(property);\n\n  if (memoized[name] === undefined) {\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n\n    if (prefixRegex.test(capitalizedName)) {\n      throw new Error(\"getVendorPrefixedName must only be called with unprefixed\\n          CSS property names. It was called with \" + property);\n    }\n\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n\n  return memoized[name] || name;\n}\n\nexport default getVendorPrefixedName;"]},"metadata":{},"sourceType":"module"}