{"ast":null,"code":"import { useEffect } from 'react';\nimport on from 'dom-lib/on';\n/**\n * Attach the event handler directly to the specified DOM element.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\n\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    var controller = target ? on(target, event, listener, capture) : null;\n    return function () {\n      controller === null || controller === void 0 ? void 0 : controller.off();\n    };\n  }, [eventTarget, event, listener, capture]);\n}","map":{"version":3,"sources":["/Users/supriyomal/Desktop/hekors-website-main/node_modules/rsuite/esm/utils/useEventListener.js"],"names":["useEffect","on","useEventListener","eventTarget","event","listener","capture","target","controller","off"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,KAAvC,EAA8CC,QAA9C,EAAwDC,OAAxD,EAAiE;AAC9E,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,KAAV;AACD;;AAEDN,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIO,MAAM,GAAG,OAAOJ,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,EAA/C,GAAoDA,WAAjE;AACA,QAAIK,UAAU,GAAGD,MAAM,GAAGN,EAAE,CAACM,MAAD,EAASH,KAAT,EAAgBC,QAAhB,EAA0BC,OAA1B,CAAL,GAA0C,IAAjE;AACA,WAAO,YAAY;AACjBE,MAAAA,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACC,GAAX,EAAxD;AACD,KAFD;AAGD,GANQ,EAMN,CAACN,WAAD,EAAcC,KAAd,EAAqBC,QAArB,EAA+BC,OAA/B,CANM,CAAT;AAOD","sourcesContent":["import { useEffect } from 'react';\nimport on from 'dom-lib/on';\n/**\n * Attach the event handler directly to the specified DOM element.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\n\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    var controller = target ? on(target, event, listener, capture) : null;\n    return function () {\n      controller === null || controller === void 0 ? void 0 : controller.off();\n    };\n  }, [eventTarget, event, listener, capture]);\n}"]},"metadata":{},"sourceType":"module"}